---@diagnostic disable:lowercase-global
-- Include luarocks installation
local lver = _VERSION:match("Lua (.+)$")
local luarocks = hs.execute("command -v luarocks", true):gsub("\n", "")
if #luarocks > 0 then
	local path_cmd = string.format("%s --lua-version %s path --lr-path", luarocks, lver)
	local cpath_cmd = string.format("%s --lua-version %s path --lr-cpath", luarocks, lver)
	package.path = string.format("%s;%s", package.path, hs.execute(path_cmd, true):gsub("\n", ""))
	package.cpath = string.format("%s;%s", package.cpath, hs.execute(cpath_cmd, true):gsub("\n", ""))
	hs.printf("\nLUA_PATH=%s\n\nLUA_CPATH=%s\n", package.path, package.cpath)
end

-- Allows execution of local scripts against hammerspoon
require("hs.ipc")

LOGLEVEL = "warning"
hs.logger.setGlobalLogLevel(LOGLEVEL)
hs.logger.setModulesLogLevel(LOGLEVEL)

-- Prevent macos from sleeping
require("nodoz").setup()
Yabai = require("yabai")

LOGGER = hs.logger.new("config", LOGLEVEL or "info")
local log = require("objectlogger").wrap(LOGGER)

Leader = { "cmd", "alt", "ctrl" }
LeaderShift = { "cmd", "alt", "ctrl", "shift" }

hs.hotkey.bind(Leader, "r", function()
	hs.console.clearConsole()
	hs.reload()
end)
hs.hotkey.bind(Leader, "f10", function()
	hs.toggleConsole()
end)
hs.hotkey.bind(Leader, "w", function()
	local out, status, typ, rc = hs.execute(YabaiPath .. " --restart-service")
	local msg = {
		rc = rc,
		status = status,
		typ = typ,
		out = out,
	}
	if not status then
		log.e("reload err", msg)
	else
		log.d("reload ok", msg)
	end
end)
hs.hotkey.bind(Leader, "h", function()
	Yabai.send({ "window", "--focus", "west" })
end)
hs.hotkey.bind(Leader, "l", function()
	Yabai.send({ "window", "--focus", "east" })
end)
hs.hotkey.bind(Leader, "j", function()
	Yabai.send({ "window", "--focus", "south" })
end)
hs.hotkey.bind(Leader, "k", function()
	Yabai.send({ "window", "--focus", "north" })
end)
hs.hotkey.bind(Leader, "m", function()
	Yabai.focus_window({ dir = "stack.prev", cycle = true })
end)
hs.hotkey.bind(Leader, ",", function()
	Yabai.focus_window({ dir = "stack.next", cycle = true })
end)
hs.hotkey.bind(Leader, ";", function()
	Yabai.send({ "window", "--focus", "recent" })
end)
hs.hotkey.bind(Leader, "z", function()
	Yabai.send({ "window", "--toggle", "zoom-fullscreen" })
end)
hs.hotkey.bind(Leader, "f", function()
	Yabai.send({ "window", "--toggle", "float" })
end)
hs.hotkey.bind(Leader, "=", function()
	Yabai.send({ "space", "--balance" })
end)
hs.hotkey.bind(Leader, "t", function()
	Yabai.send({ "window", "--minimize" })
end)

-- scratchpads = {}
-- Scratchpad = hs.hotkey.modal.new(Leader, "p", "Toggle Scratchpad")
-- Scratchpad:bind({}, "escape", function()
-- 	Scratchpad:exit()
-- end)
-- for i = 1, 4 do
-- 	local _i = i
-- 	Scratchpad:bind({}, tostring(_i), function()
-- 		Yabai.send({ "query", "--windows", "--window" }, function(win, err)
-- 			assert(err == nil)
-- 			if scratchpads[_i] == nil then
-- 				win.key = string.format("%s//%s", win.app, win.id)
-- 				Yabai.send({ "window", "--scratchpad", win.key }, function(_, e)
-- 					assert(e == nil)
-- 					scratchpads[_i] = win
-- 					log.d("scratchpads", scratchpads)
-- 				end)
-- 			else
-- 				Yabai.send({ "window", "--scratchpad", scratchpads[_i].key }, function(_, e)
-- 					assert(e == nil)
-- 					scratchpads[_i] = nil
-- 					log.d("scratchpads", scratchpads)
-- 				end)
-- 			end
-- 		end)
-- 		Scratchpad:exit()
-- 	end)
-- end
-- hs.hotkey.bind(Leader, "f1", function()
-- 	Yabai.send({ "space", "--layout", "float" })
-- 	hs.alert.show("Floating layout enabled")
-- end)
-- hs.hotkey.bind(Leader, "f2", function()
-- 	Yabai.send({ "space", "--layout", "stack" })
-- 	hs.alert.show("Stack layout enabled")
-- end)
-- hs.hotkey.bind(Leader, "f3", function()
-- 	Yabai.send({ "space", "--layout", "bsp" })
-- 	hs.alert.show("BSP layout enabled")
-- end)
--
-- SwapMode = hs.hotkey.modal.new(Leader, "f4", "Swap Mode")
-- SwapMode:bind({}, "h", function()
-- 	Yabai.send({ "window", "--swap", "west" })
-- end)
-- SwapMode:bind({}, "l", function()
-- 	Yabai.send({ "window", "--swap", "east" })
-- end)
-- SwapMode:bind({}, "j", function()
-- 	Yabai.send({ "window", "--swap", "south" })
-- end)
-- SwapMode:bind({}, "k", function()
-- 	Yabai.send({ "window", "--swap", "north" })
-- end)
-- SwapMode:bind({}, "escape", function()
-- 	SwapMode:exit()
-- 	hs.alert("Swap Mode Deactivated")
-- end)
--
-- WarpMode = hs.hotkey.modal.new(Leader, "f5", "Warp Mode")
-- WarpMode:bind({}, "h", function()
-- 	Yabai.send({ "window", "--warp", "west" })
-- end)
-- WarpMode:bind({}, "l", function()
-- 	Yabai.send({ "window", "--warp", "east" })
-- end)
-- WarpMode:bind({}, "j", function()
-- 	Yabai.send({ "window", "--warp", "south" })
-- end)
-- WarpMode:bind({}, "k", function()
-- 	Yabai.send({ "window", "--warp", "north" })
-- end)
-- WarpMode:bind({}, "m", function()
-- 	Yabai.send({ "window", "--warp", "stack.next" })
-- end)
-- WarpMode:bind({}, ",", function()
-- 	Yabai.send({ "window", "--warp", "stack.prev" })
-- end)
-- WarpMode:bind({}, "escape", function()
-- 	WarpMode:exit()
-- 	hs.alert("Warp Mode Deactivated")
-- end)
--
-- StackMode = hs.hotkey.modal.new(Leader, "f6", "Stack Mode")
-- StackMode:bind({}, "h", function()
-- 	Yabai.send({ "window", "west", "--stack", "east" })
-- end)
-- StackMode:bind({}, "l", function()
-- 	Yabai.send({ "window", "east", "--stack", "west" })
-- end)
-- StackMode:bind({}, "j", function()
-- 	Yabai.send({ "window", "south", "--stack", "north" })
-- end)
-- StackMode:bind({}, "k", function()
-- 	Yabai.send({ "window", "north", "--stack", "south" })
-- end)
-- StackMode:bind({}, "escape", function()
-- 	StackMode:exit()
-- 	hs.alert("Stack Mode Deactivated")
-- end)
--
-- hs.hotkey.bind(LeaderShift, "h", function()
-- 	Yabai.send({ "window", "--swap", "west" })
-- end)
-- hs.hotkey.bind(LeaderShift, "l", function()
-- 	Yabai.send({ "window", "--swap", "east" })
-- end)
-- hs.hotkey.bind(LeaderShift, "j", function()
-- 	Yabai.send({ "window", "--swap", "south" })
-- end)
-- hs.hotkey.bind(LeaderShift, "k", function()
-- 	Yabai.send({ "window", "--swap", "north" })
-- end)
--
-- hs.hotkey.bind(LeaderShift, "y", function()
-- 	Yabai.send({ "window", "--warp", "west" })
-- end)
-- hs.hotkey.bind(LeaderShift, "o", function()
-- 	Yabai.send({ "window", "--warp", "east" })
-- end)
-- hs.hotkey.bind(LeaderShift, "u", function()
-- 	Yabai.send({ "window", "--warp", "south" })
-- end)
-- hs.hotkey.bind(LeaderShift, "i", function()
-- 	Yabai.send({ "window", "--warp", "north" })
-- end)
--
-- hs.hotkey.bind(LeaderShift, "n", function()
-- 	Yabai.send({ "window", "west", "--stack", "east" })
-- end)
-- hs.hotkey.bind(LeaderShift, ".", function()
-- 	Yabai.send({ "window", "east", "--stack", "west" })
-- end)
-- hs.hotkey.bind(LeaderShift, "m", function()
-- 	Yabai.send({ "window", "south", "--stack", "north" })
-- end)
-- hs.hotkey.bind(LeaderShift, ",", function()
-- 	Yabai.send({ "window", "north", "--stack", "south" })
-- end)
-- hs.hotkey.bind(LeaderShift, ";", function()
-- 	Yabai.send({ "window", "--insert", "stack" })
-- end)
