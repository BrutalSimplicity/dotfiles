TMUX_CONF="$HOME/.config/tmux"

# Settings {{{

# move to the next session if the active session
# is destroyed (i.e. last window is killed)
set -g detach-on-destroy no-detached

# start window indexes at 1
set -g base-index 1

# start pane indexes at 1
set -g pane-base-index 1

set -g renumber-windows on

# Allow programs to bypass tmux using a terminal escape sequence
# This allows programs to render images using the Kitty graphics protocol.
# See [image.nvim](https://github.com/3rd/image.nvim)
set -g allow-passthrough on

# https://github.com/tmux/tmux/wiki/FAQ#how-do-i-use-rgb-colour
set -as terminal-features ",$TERM*:RGB"

set -g mouse on
set -g mode-keys vi

# rebind prefix key to C-a
unbind C-b
bind C-a send-prefix
set -g prefix C-a
# }}}

# create sessions
bind -N 'Create new session' 'N'  new-session
bind -N 'Create new directory session' 'S' run "$TMUX_CONF/tmux.sh new-directory-session"
bind -N 'Create new directory window' 'W' run "$TMUX_CONF/tmux.sh new-directory-window"

# session navigation
bind -N 'Switch to last client' BTab switch-client -l
bind -N 'Close session' X {
  switch-client -l
  kill-session
}
bind -N 'Close window' M-x kill-window

bind -N 'Select left pane' -r h select-pane -L
bind -N 'Select right pane' -r j select-pane -D
bind -N 'Select above pane' -r k select-pane -U
bind -N 'Select below pane' -r l select-pane -R

# resize panes
bind -N 'Resize pane left' -r H resize-pane -L 5
bind -N 'Resize pane down' -r J resize-pane -D 5
bind -N 'Resize pane up' -r K resize-pane -U 5
bind -N 'Resize pane right' -r L resize-pane -R 5

bind -N 'Break pane' ! {
  break-pane
  select-pane -m
  last-window
}
bind -N 'Join (marked) pane' @ {
  join-pane -h
}

bind -N 'Previous window' -r p previous-window
bind -N 'Next window' -r n next-window
bind -N 'Next session' -r ) switch-client -n
bind -N 'Previous session' -r ( switch-client -p

# kill window without confirmation
bind -N 'Close window (no confirmation)' -r C-x kill-pane

bind -N 'Split window horizontally' -r | split-window -h -c "#{pane_current_path}"
bind -N 'Split window vertically' -r - split-window -v -c "#{pane_current_path}"

# move window after window given in prompt
bind -r . command-prompt -T target { move-window -a -t "%%" }

# copy mode bindings
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi C-v send-keys -X rectangle-toggle
bind -T copy-mode-vi y send-keys -X copy-selection-and-cancel

# vim-compatbility bindings
is_vim="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(fzf|view|n?vim?x?)(diff)?$'"
is_vscode="ps -o state= -o comm= -t '#{pane_tty}' | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(fzf|view|n?vim?x?)(diff)?$'"

# Root Key bindings {{{

## non-cyclic pane navigation
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h' { if -F '#{pane_at_left}' '' 'select-pane -L' }
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j' { if -F '#{pane_at_bottom}' '' 'select-pane -D' }
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k' { if -F '#{pane_at_top}' '' 'select-pane -U' }
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l' { if -F '#{pane_at_right}' '' 'select-pane -R' }

bind-key -n 'M-l' if-shell "$is_vim" 'send-keys M-l' { next-window }
bind-key -n 'M-h' if-shell "$is_vim" 'send-keys M-h' { previous-window }

bind-key -T copy-mode-vi 'C-h' if -F '#{pane_at_left}' '' 'select-pane -L'
bind-key -T copy-mode-vi 'C-j' if -F '#{pane_at_bottom}' '' 'select-pane -D'
bind-key -T copy-mode-vi 'C-k' if -F '#{pane_at_top}' '' 'select-pane -U'
bind-key -T copy-mode-vi 'C-l' if -F '#{pane_at_right}' '' 'select-pane -R'

bind-key -n 'M-\' run -b "./tmux.sh toggle-zoom-nvim-pane"
bind-key -n 'M-;' run -b "./tmux.sh toggle-goto-nvim-pane"

# }}}

# Window Mode {{{
%hidden window_mode_status_line=\
"#[align=centre]\
<#[bold]H#[nobold]/#[bold]L#[nobold]> => #[bold]-/+ Width#[nobold]   \
<#[bold]J#[nobold]/#[bold]K#[nobold]> => #[bold]-/+ Height#[nobold]   \
<#[bold]h#[nobold]/#[bold]l#[nobold]/#[bold]j#[nobold]/#[bold]k#[nobold]> => #[bold]l/r/d/u Pane#[nobold]   \
<#[bold]v#[nobold]/#[bold]s#[nobold]> => #[bold]V/H Split#[nobold]   \
<#[bold]<#[nobold]/#[bold]>#[nobold]> => #[bold]Rotate L/R#[nobold]   \
<#[bold]=#[nobold]> => #[bold]Size Panes Equally#[nobold]   \
<#[bold]X#[nobold]> => #[bold]Close#[nobold]   \
<#[bold]SPACE#[nobold]> => #[bold]Next Layout#[nobold]   \
<#[bold]ESC#[nobold]> => #[bold]Done#[nobold]"

bind-key -N 'Window Mode' C-s {
  bind-key -T root L { 
    resize-pane -R 5
    display -N -d 0 '#{E:window_mode_status_line}'
  }
  bind-key -T root H {
    resize-pane -L 5
    display -N -d 0 '#{E:window_mode_status_line}'
  }
  bind -T root J {
    resize-pane -D 5
    display -N -d 0 '#{E:window_mode_status_line}'
  }
  bind -T root K {
    resize-pane -U 5
    display -N -d 0 '#{E:window_mode_status_line}'
  }
  bind -T root h {
    select-pane -L
    display -N -d 0 '#{E:window_mode_status_line}'
  }
  bind -T root l {
    select-pane -R
    display -N -d 0 '#{E:window_mode_status_line}'
  }
  bind -T root j {
    select-pane -D
    display -N -d 0 '#{E:window_mode_status_line}'
  }
  bind -T root k {
    select-pane -U
    display -N -d 0 '#{E:window_mode_status_line}'
  }
  bind -T root < {
    rotate-window -D
    display -N -d 0 '#{E:window_mode_status_line}'
  }
  bind -T root > {
    rotate-window
    display -N -d 0 '#{E:window_mode_status_line}'
  }
  bind -T root S {
    split-window -v
    display -N -d 0 '#{E:window_mode_status_line}'
  }
  bind -T root V {
    split-window -h
    display -N -d 0 '#{E:window_mode_status_line}'
  }
  bind -T root = {
    select-layout -E
    display -N -d 0 '#{E:window_mode_status_line}'
  }
  bind -T root X {
    kill-pane
    display -N -d 0 '#{E:window_mode_status_line}'
  }
  bind -T root Space {
    next-layout
    display -N -d 0 '#{E:window_mode_status_line}'
  }
  bind -T root Escape {
    unbind -T root L
    unbind -T root H
    unbind -T root J
    unbind -T root K
    unbind -T root h
    unbind -T root l
    unbind -T root j
    unbind -T root k
    unbind -T root <
    unbind -T root >
    unbind -T root S
    unbind -T root V
    unbind -T root =
    unbind -T root X
    unbind -T root Space
    unbind -T root Escape
  }
  display -N -d 0 '#{E:window_mode_status_line}'
}
# }}}

set -g @plugin 'tmux-plugins/tpm'
set -g @plugin 'tmux-plugins/tmux-sensible'
set -g @plugin 'tmux-plugins/tmux-yank'
set -g @plugin 'catppuccin/tmux'
# set -g @plugin 'sainnhe/tmux-fzf'

set -g @catppuccin_window_left_separator "█"
set -g @catppuccin_window_right_separator "█ "
set -g @catppuccin_window_number_position "right"
set -g @catppuccin_window_middle_separator "  █"

set -g @catppuccin_window_default_fill "number"
set -g @catppuccin_window_status_enable "yes"
set -g @catppuccin_window_status_icon_enable "yes"
set -g @catppuccin_icon_window_last "󰖰 "
set -g @catppuccin_icon_window_current "󰖯 "
set -g @catppuccin_icon_window_zoom "󰁌 "
set -g @catppuccin_icon_window_mark "󰃀 "
set -g @catppuccin_icon_window_silent "󰂛 "
set -g @catppuccin_icon_window_activity "󰖲 "
set -g @catppuccin_icon_window_bell "󰂞 "

set -g @catppuccin_window_current_fill "number"
set -g @catppuccin_window_current_text "#{window_name}"
set -g @catppuccin_window_default_text "#{window_name}"

set -g @catppuccin_status_modules "application"
set -g @catppuccin_status_left_separator  ""
set -g @catppuccin_status_right_separator " "
set -g @catppuccin_status_right_separator_inverse "yes"
set -g @catppuccin_status_fill "all"
set -g @catppuccin_status_connect_separator "no"

run '~/.tmux/plugins/tpm/tpm'


